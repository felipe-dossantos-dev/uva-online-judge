Seção 1: 

1.1.1 -
	10341 - Maths
	11292 - grafos
	11450 - greedy
	11450 - dois ccomponentes
	11635 - network flow
	11506 - Graph
	10243 - Directed Acyclic Graph
	10717 - composicao
	11512 - suffix trie
	10065 - convex hull

1.1.2 - 
	1. A
	2. A
	3. A
	4. A
	5. C
	6. B
	7. A
	8. B - Don't know
	9. A

1.2.3 - 
	1. ok
	2. ok
	3. ok
	4. ok
	5. ordenar, estou assumindo que sei fazer
	6. busca binaria, estou assumindo que sei fazer
	7. ok, com alguma dificuldade
	8. não consegui fazer as permutacoes
	9. ok, mas usei as conversões prontas do java
	10. ok
	11. não tentei, mas possível que teria muita dificuldades para fazer

1.2.4 - 
	1. C
	2. C
	3. B
	4. Go to another question, because you have to do anoother kind of implementation, or do another kind of algorithm to resolve the problem. Unless you know the other kind of algorithm to resolve.
	5. should check for tricky test case where the code break, like positions of arrays out of bound.
	6. try to resolve that problem too.
	7. continue to work on the problem you are working, and wait, if another team do it, then you go try to solve that exercise
	8.do another problem
	9.C

Ad Hoc
	Super Easy
		00272 - ok
		01124 - ok
		10550 - não deu certo ainda
		11044 - ok
		11172 - ok
		11364 - ok
		11498 - ok
		11547 - ok
		11727 - ok
		12250 - ok
		12279 - rte, não tenho ideia aonde esta dando
		12289 - ok
		12372 - ok
		12403 - ok
		12577 - ok
	Easy
		00621 - ok
		10114 - ok
		10300 - ok
		10963 - rte, mas bateu as respostas
		11332 - ok
		11559 - ok
		11679 - ok
		11764 - ok
		11799 - ok
		11942 - ok
		12015 - ok
		12157 - ok
		12468 - ok
		12503 - ok
		12554 - ok
	Medium
		00119 - ok
		00573 - ok
		00661 - ok
		10141 - ok
		10324 - ok
		10424 - ok
		10919 - ok
		11507 - não consegui achar uma lógica
		11586 - ok
		11661 - ok
		11683 - ok
		11687 - não consegui entender
		11956 - ok
	--Games--
	Cards
		00162 - ok
		00462 - ok
		00555 - ok
		10205 - ok
		10315 - deixa por ultimo
		10646 - ok
		11225 - ok
		11678 - ok
		12247 - ok
	Chess
		00255 - ok
		00278 - ok
		00696 - ok
		10284 - passou em todos os casos do udebug e outros do forum mais deu rte, tenho nem ideia da onde
	Others Easier
		00489 - ok
		10189 - ok
		11459 - ok
	Others Harder
		00584 - ok
		10443 - ok
		10813 - ok
	Palindromes
		00401 - ok
		10945 - ok
		11221 - ok
	Anagram
		00156 - ok
		00195 - LTE, como faço em java aqui fica dificultado.Em c++ só usar next_permutation
		00454 - ok
	Real Life Problems Easier
		00161 - ok
		00637 - ok
		10812 - ok
	Real Life Problems Harder
		00403 - não consegui, cansei de fazer ele
		00608 - ok
		01061 - não consegui
	Time
		00579 - ok
		00893 - ok
		11947 - ok
	Time Waster
		Não vou entrar nessas categoria agora. Vou fazer mais conteúdo primeiro.

Seção 2:

2.2.1 - 
	unsorted array integer, size : 1 <= n <= 100k (10^6)
	1. 
		- primeiramente faria o ordenação no array (n log n = 6 x 10^6)
		- faria a busca linear para encontrar os pares O (n) = 10^6
		- total O(n) = 7 x 10^6
	2.
		- não sei
	3.
		- não sei
	4.
		- primeiramente faria o ordenação no array O(n log n = 6 x 10^6)
		- busca binária para achar o primeiro elemento O(log n = 6)
		- print da sequencia O(n)
	5.
		- faria uma busca linear, guardando o tamanho atual da subsequencia ordenada, e o tamanho da maior subsequencia, adicionaria um ao valor atual da subsequencia comparando o valor atual com o anterior dentro do array O(n)

	6.
		- primeiramente faria o ordenação no array O(n log n = 6 x 10^6)
		- divide o indice maximo por dois e acha o elemento O(1)

2.2.2 - 
	bit mask
	1. modulo feito em bitmask ==>  a = a & ~(-div);
	2. se é potencia de 2 ==> a = a & ~(-a); e depois compara com 0
	3. desligar bit menos significativo ==> a = a & ~(a & (-a));
	4. ligar o último 0 ==> 
	5. Turn off the last consecutive run of ones in S ==>
	6. Turn on the last consecutive run of zeroes in S ==>
	7. UVA 11173 - ok

DS
	1D Array Manipulation
		10038 - ok
		11340 - ok
		12356 - ok
	2D Array Manipulation
		10855 - ok
		10920 - ok
		11581 - não consegui entender o problema
	Java Collection
		00146 - Fiz em c++
		10107 - ok
		10258 - ok
	Bit Manipulation -
		00594 - ok, mas foi feito com uma funcao pronta do java
		00700 - ok
		01241 - ok
		10264 - não consegui entender e fazer
		11173 - ok
		11760 - ok
		11926 - ok
		11933 - ok
	Linked List - 
		11988 - ok
	Stack - 
		00514 - ok
		00732 - TLE
 		01062 - ok
 	Queue and Deque -
 		to com preguiça de fazer

Seção 2.3

2.3.1 - Depende do tamanho dos inputs, e qual o tipo de chave, se for uma chave de string, teria que comparar
	strings uma a uma, o que geraria perca de performance e se tiver que achar uma chave teria que fazeruma busca linear
 	na chave para saber qual certa.

2.3.2 - 
 	1. search(7) - 15 - 6 - 7
 	   search(71) - 15 - 23 - 71
	   search(22) - 15 - 23 - not found

2.3.3 -
	1. percorre a arvore in-ordem conferindo se o filho da direita é maior que o pai e o da esquerda é menor que o pai
	e chama recursivamente, se encontra algo que não corresponde a restrição, para o loop
	2. percorre em in ordem até chegar ao nó a , ou o maior elemento na arvore depois de a, depois disso sai printando tudo, 
	até achar um elemento b, ou maior que b
	3. atravessa em pós ordem, verifica se é nó, e imprimi

2.3.4 - Não consegui responder, não entendi o que o sucessor faz.
2.3.5 - Farei depois **
2.3.6 - 
	1. Insert(26) : procura pelo valor mais próximoo de 26, no caso 25, pega o indice i dele, faz 2 * i + 1 
	e insere 26 nessa posição.
	2. ExtractMax() : retorna a posição 0 do vetor.

2.3.7 - se você usar somente valores positivos e ao inserir transformar em valores negativos em um MaxHeap, eles estarão ordenados de forma descendente

... não fiz o resto ...

Non-Linear DS
	TreeMap
		10226 - ok
		11286 - ok
		11572 - ok
	Set
		00978 - ok
		11136 - ok
		11849 - ok
	PriorityQueue
		01203 - ok
		10954 - 



	Obs: Fazer somente os com * (essenciais), vai ser mais efetivo cobrir todo o conteúdo
	Obs 2: Vou deixar a seção 2.4 para depois.
	Obs 3: Skils a melhorar:
			1. Interpretação de texto
			2. Teste de Mesa
			3. Analise de Algoritmos
			4. Digitação
